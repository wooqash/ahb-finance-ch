@use "sass:math";
@use "sass:string";

// $color-gunmetal: #143640;
// $color-deep-space-sparkle: #3f606b;
// $color-rich-black-fogra-29: #00101a;

// $color-brown-sugar: #bb7551;
// $color-light-salmon: #F0A47E;
// $color-russet: #884927;

// $color-verdigris: #40b2b6;
// $color-electric-blue: #78E4E8;
// $color-teal: #008286;

// $color-midnight-green-eagle-green: #104657;
// $color-copper-rose: #a45f62;
// $color-white: #ffffff;
// $color-black: #000000;
// $color-upsdell-red: #B00020;

// $primary-color: $color-gunmetal;
// $primary-light-color: $color-deep-space-sparkle;
// $primary-dark-color: $color-rich-black-fogra-29;
// $on-primary-text-color: $color-white;

// $secondary-color: $color-brown-sugar;
// $secondary-light-color: $color-light-salmon;
// $secondary-dark-color: $color-russet;
// $on-secondary-text-color: $color-black;
// $on-secondary-dark-text-color: $color-white;

// $third-color: $color-verdigris;
// $third-light-color: $color-electric-blue;
// $third-dark-color: $color-teal;
// $on-third-text-color: $color-black;
// $on-third-dark-text-color: $color-white;

// $error-color: $color-upsdell-red;

// $bg-top-decor-img: url('../public/decor_top_opt.png');
// $bg-bottom-decor-img: url('../public/decor_down_opt.png');
// $bg-gradient-img: url('../public/circle_gradient_opt.png');

// $background-color: $primary-color;
// $main-text-color: $on-primary-text-color;

// $main-text-min-font-size: 14px;
// $main-text-max-font-size: 16px;

// $headers-font-size: (
//     h1-min-font-size: 40px,
//     h1-max-font-size: 60px,
//     h2-min-font-size: 30px,
//     h2-max-font-size: 40px,
//     h3-min-font-size: 25px,
//     h3-max-font-size: 30px,
//     h4-min-font-size: 20px,
//     h4-max-font-size: 26px,
//     h5-min-font-size: 16px,
//     h5-max-font-size: 22px,
//     h6-min-font-size: 14px,
//     h6-max-font-size: 18px,
// );

// $scrollbar-track-color: $primary-light-color;
// $scrollbar-thumb-color: $secondary-color;

/******************************************/
//                 COLORS
/******************************************/
$white: #ffffff;
$indigo-dye: #00435c;
$sky-blue-crayola: #3ecfeb;
$rich-black-forga-29: #001922;
$light-cyan: #d8f6fb;
$buff: #f4db89;

$on-secondary-text-color: $indigo-dye;

$primary-bg-color: $indigo-dye;
$on-primary-text-color: $white;
$on-primary-link-text-color: $sky-blue-crayola;
$on-primary-link-hover-text-color: $white;
$header-text-color: $indigo-dye;
$button-text-color: $indigo-dye;

$secondary-bg-color: $white;
$on-secondary-text-color: $indigo-dye;
$on-secondary-link-text-color: $sky-blue-crayola;
$on-secondary-link-hover-text-color: $indigo-dye;

$button-bg-color: $sky-blue-crayola;
$primary-accents-color: $sky-blue-crayola;

$additional-black-color: $rich-black-forga-29;

$secondary-accents-color: $buff;

$form-frame-color: $light-cyan;

/******************************************/
//                  FONTS
/******************************************/

// Learn more about what's going on here:
// @link https://moderncss.dev/generating-font-size-css-rules-and-creating-a-fluid-type-scale/

// Select a ratio to preview
// Default is "perfectFourth"
$type-ratios: (
  "minorSecond": 1.067,
  "majorSecond": 1.125,
  "minorThird": 1.2,
  "majorThird": 1.25,
  "perfectFourth": 1.333,
  "augmentedFourth": 1.414,
  "perfectFifth": 1.5,
  "goldenRatio": 1.618,
);

@function type-ratio($key) {
  @return map-get($type-ratios, $key);
}

// Recommended
$type-base-size: 1rem;

// Select by key of map, or use a custom value
$type-size-ratio: type-ratio("perfectFourth");

// List in descending order to prevent extra sort function
// Limited to high-touch heading styles
$type-levels: 4, 3, 2, 1;

// Create map with h[x] as key
// and computed font-size as value
$type-styles: ();
$level-size: $type-base-size;
@each $level in $type-levels {
  $level-size: $level-size * $type-size-ratio;
  $type-styles: map-merge($type-styles, (#{"h"}$level: $level-size));

  // Output heading styles
  // Assign to element and create utility class
  h#{$level},
  .h#{$level} {
    // Fallback for browsers that don't support min / max
    font-size: $level-size;

    // Recommendation courtesy of this brilliant work:
    // @link https://kittygiraudel.com/2020/05/18/using-calc-to-figure-out-optimal-line-height/
    line-height: calc(2px + 2ex + 2px);

    // Set with `em` to be relative to current `font-size`
    margin-bottom: 0.65em;

    // Limit in place based on testing -> smaller ratios are
    // prematurely or unnecessarily reduced
    @if ($type-size-ratio > 1.2) {
      // Fluid type styles

      // Remove unit for calculations
      $level-unitless: math.div($level-size, $level-size * 0 + 1);

      // Set minimum size to a percentage less than $level-size
      // Reduction is greater for large font sizes (> 4rem) to help
      // prevent overflow due to font-size on mobile devices
      $fluid-reduction: if($level-size > 4, 0.5, 0.33);
      $fluid-min: $level-unitless - ($fluid-reduction * $level-unitless);

      // Prevent dropping lower than 1rem (body font-size)
      $fluid-min: if($fluid-min > $type-base-size, $fluid-min, 1);

      // Adjust max modifier slightly per level to prevent "same" size
      // or lower levels appaering larger than higher levels
      // 4vw was selected by testing from $type-ratios map, YMMV ðŸ™ƒ
      $fluid-scaler: ($level-unitless - $fluid-min) + 4vw;

      font-size: clamp(
        #{$fluid-min}rem,
        #{$fluid-scaler} + 1rem,
        #{$level-size}
      );
    }
  }
}

@function type-style($key) {
  @return map-get($type-styles, $key);
}

// @font-face {
//   font-family: "Metropolis-Regular";
//   font-weight: 400;
//   src: url("../public/metropolis/Metropolis-Regular.otf") format("opentype");
// }

@font-face {
  font-family: "Metropolis-RegularItalic";
  font-weight: 400;
  font-style: normal;
  src: url("../public/metropolis/Metropolis-RegularItalic.otf")
    format("opentype");
}

$font-prefix: "Metropolis-";
$font-src: "../public/metropolis/";

$type-fonts: (
    "Thin": "#{$font-prefix}Thin",
    "Thin Italic": "#{$font-prefix}ThinItalic",
    "Extra Light": "#{$font-prefix}ExtraLight",
    "Extra Light Italic": "#{$font-prefix}ExtraLightItalic",
    "Light": "#{$font-prefix}Light",
    "Light Italic": "#{$font-prefix}LightItalic",
    "Regular": "#{$font-prefix}Regular",
    "Regular Italic": "#{$font-prefix}RegularItalic",
    "Medium": "#{$font-prefix}Medium",
    "Medium Italic": "#{$font-prefix}MediumItalic",
    "Semi-Bold": "#{$font-prefix}SemiBold",
    "Semi-Bold Italic": "#{$font-prefix}SemiBoldItalic",
    "Bold": "#{$font-prefix}Bold",
    "Bold Italic": "#{$font-prefix}BoldItalic",
    "Extra-Bold": "#{$font-prefix}ExtraBold",
    "Extra-Bold Italic": "#{$font-prefix}ExtraBoldItalic",
    "Black": "#{$font-prefix}Black",
    "Black Italic": "#{$font-prefix}BlackItalic",
);

@function type-font($key) {
    @return map-get($type-fonts, $key);
}

$font-weights: (
  "Thin": 100,
  "Extra Light": 200,
  "Light": 300,
  "Regular": 400,
  "Medium": 500,
  "Semi-Bold": 600,
  "Bold": 700,
  "Extra-Bold": 800,
  "Black": 900,
);

@function font-weight($key) {
    @return map-get($font-weights, $key);
}

@each $font-id, $font-name in $type-fonts {
    $font-weight: 400;
    $font-style: normal;

    @if string.index($font-id, "Italic") {
        $font-italic-variant: string.slice($font-id, 0, string.index($font-id, "Italic")-2); 
        
        $font-weight: font-weight($font-italic-variant);
        // @debug $font-weight;
        $font-style: italic;
    } @else {
        $font-weight: font-weight($font-id);
        $font-style: normal;
    }

    // @debug $font-name;
    // @debug $font-weight;
    // @debug $font-style;

    @font-face {
        font-family: $font-name;
        font-weight: $font-weight;
        font-style: $font-style;
        src: url("#{$font-src}#{$font-name}.otf") format("opentype");
    }
}




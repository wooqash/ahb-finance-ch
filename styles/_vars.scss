@use "sass:math";
@use "sass:string";

/******************************************/
//                 COLORS
/******************************************/
$white: #ffffff;
$indigo-dye: #00435c;
$sky-blue-crayola: #3ecfeb;
$rich-black-forga-29: #001922;
$light-cyan: #d8f6fb;
$buff: #f4db89;

$on-secondary-text-color: $indigo-dye;

$primary-bg-color: $indigo-dye;
$on-primary-text-color: $white;
$on-primary-link-text-color: $sky-blue-crayola;
$on-primary-link-hover-text-color: $white;
$header-text-color: $indigo-dye;
$button-text-color: $indigo-dye;

$secondary-bg-color: $white;
$on-secondary-text-color: $indigo-dye;
$on-secondary-link-text-color: $sky-blue-crayola;
$on-secondary-link-hover-text-color: $indigo-dye;

$button-bg-color: $sky-blue-crayola;
$primary-accents-color: $sky-blue-crayola;

$additional-black-color: $rich-black-forga-29;

$secondary-accents-color: $buff;

$form-frame-color: $light-cyan;

/******************************************/
//                  FONTS
/******************************************/

// Learn more about what's going on here:
// @link https://moderncss.dev/generating-font-size-css-rules-and-creating-a-fluid-type-scale/

// Select a ratio to preview
// Default is "perfectFourth"
$type-ratios: (
  "minorSecond": 1.067,
  "majorSecond": 1.125,
  "minorThird": 1.2,
  "majorThird": 1.25,
  "perfectFourth": 1.333,
  "augmentedFourth": 1.414,
  "perfectFifth": 1.5,
  "goldenRatio": 1.618,
);

@function type-ratio($key) {
  @return map-get($type-ratios, $key);
}

// Recommended
$type-base-size: 1.6rem;

// Select by key of map, or use a custom value
$type-size-ratio: type-ratio("perfectFourth");

// List in descending order to prevent extra sort function
// Limited to high-touch heading styles
$type-levels: 4, 3, 2, 1;

// Create map with h[x] as key
// and computed font-size as value
$type-styles: ();
$level-size: $type-base-size;
@each $level in $type-levels {
  $level-size: $level-size * $type-size-ratio;
  $type-styles: map-merge($type-styles, (#{"h"}$level: $level-size));

  // Output heading styles
  // Assign to element and create utility class
  // h#{$level},
  .h#{$level} {
    // Fallback for browsers that don't support min / max
    font-size: $level-size;

    // Recommendation courtesy of this brilliant work:
    // @link https://kittygiraudel.com/2020/05/18/using-calc-to-figure-out-optimal-line-height/
    line-height: calc(2px + 2ex + 2px);

    // Set with `em` to be relative to current `font-size`
    margin-bottom: 0.65em;

    // Limit in place based on testing -> smaller ratios are
    // prematurely or unnecessarily reduced
    @if ($type-size-ratio > 1.2) {
      // Fluid type styles

      // Remove unit for calculations
      $level-unitless: math.div($level-size, $level-size * 0 + 1);

      // Set minimum size to a percentage less than $level-size
      // Reduction is greater for large font sizes (> 4rem) to help
      // prevent overflow due to font-size on mobile devices
      $fluid-reduction: if($level-size > 4, 0.5, 0.33);
      $fluid-min: $level-unitless - ($fluid-reduction * $level-unitless);

      // Prevent dropping lower than 1rem (body font-size)
      $fluid-min: if($fluid-min > $type-base-size, $fluid-min, 1);

      // Adjust max modifier slightly per level to prevent "same" size
      // or lower levels appaering larger than higher levels
      // 4vw was selected by testing from $type-ratios map, YMMV ðŸ™ƒ
      $fluid-scaler: ($level-unitless - $fluid-min) + 4vw;

      font-size: clamp(
        #{$fluid-min}rem,
        #{$fluid-scaler} + 1rem,
        #{$level-size}
      );
    }
  }
}

@function type-style($key) {
  @return map-get($type-styles, $key);
}

@font-face {
  font-family: 'Metropolis Medium';
  src: local('Metropolis Medium'), local('Metropolis-Medium'),
      url('../public/metropolis/Metropolis-Medium.woff2') format('woff2'),
      url('../public/metropolis/Metropolis-Medium.woff') format('woff');
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Metropolis Bold';
  src: local('Metropolis Bold'), local('Metropolis-Bold'),
      url('../public/metropolis/Metropolis-Bold.woff2') format('woff2'),
      url('../public/metropolis/Metropolis-Bold.woff') format('woff');
  font-weight: bold;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Metropolis Regular';
  src: local('Metropolis Regular'), local('Metropolis-Regular'),
      url('../public/metropolis/Metropolis-Regular.woff2') format('woff2'),
      url('../public/metropolis/Metropolis-Regular.woff') format('woff');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Metropolis Semi Bold';
  src: local('Metropolis Semi Bold'), local('Metropolis-SemiBold'),
      url('../public/metropolis/Metropolis-SemiBold.woff2') format('woff2'),
      url('../public/metropolis/Metropolis-SemiBold.woff') format('woff');
  font-weight: 600;
  font-style: normal;
  font-display: swap;
}

$sans-serif-fonts:  Verdana, Arial, sans-serif;
$sans-serif-regular-font: "Metropolis Regular", $sans-serif-fonts;
$sans-serif-bold-font: "Metropolis Bold", $sans-serif-fonts;
$sans-serif-semi-bold-font: "Metropolis Semi Bold", $sans-serif-fonts;
$sans-serif-medium-font: "Metropolis Medium", $sans-serif-fonts;


